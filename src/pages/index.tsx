import Head from "next/head";
import { useState } from "react";
import { Inter } from "@next/font/google";
import { Tab } from "@headlessui/react";
import {
  Reorder,
  motion,
  AnimatePresence,
  useDragControls,
} from "framer-motion";
import Card from "../components/Card";
import InputForm from "../components/InputForm";
import PowerFields from "../data/PowerFields.json";
import ProjectileFields from "../data/ProjectileFields.json";
import SettingsFields from "../data/SettingsFields.json";
import OutputFields from "../components/OutputFields";
import { entity, settings } from "@/types/Types";
import { invoke } from "@tauri-apps/api/tauri";

export default function Home() {


  const calculate = () => {
    if(!settings || !projectile || !powers) return;
      powers.map(power => {
          console.log(power)
      })
    invoke("calculate",
        {

    projectile:
        projectile.map(projectile => ({
          x: Number(projectile.x),
          y: Number(projectile.y),
          z: Number(projectile.z),
          vx: Number(projectile.vx),
          vy: Number(projectile.vy),
          vz: Number(projectile.vz),
          amount: 0,
          ticks: Number(projectile.fuse)
        })),
            powers:
                powers.map(power => ({
                    x: Number(power.x),
                    y: Number(power.y),
                    z: Number(power.z),
                    vx: Number(power.vx),
                    vy: Number(power.vy),
                    vz: Number(power.vz),
                    amount: 0,
                    ticks: 0
                })),
          sets:
              settings.map(settings => ({
                max_power: Number(settings.maxPower) + 1,
                x: settings.x,
                y: settings.y,
                z: settings.z,
                vx: settings.vx,
                vy: settings.vy,
                vz: settings.vz,

              })),


        }
    ).then(console.log).catch(console.error)
  }

  const tabs = ["Powers", "Projectile", "Settings", "Results"];

  const [selectedIndex, setSelectedIndex] = useState(0);

  const [settings, setSettings] = useState<settings[]>([
    {
      x: "000000001",
      y: "0000",
      z: "333",
      vx: "0",
      vy: "00",
      vz: "0",
      maxPower: "17",
    },
  ]);

  const [projectile, setProjectile] = useState<entity[]>([
      {
          //
      x: "-3672825.4900000095",
      y: "183.99591155706892",
      z: "-4197744.49000001",
      vx: "0",
      vy: "0.002085711406492225",
      vz: "0",
      fuse: "5",
    },
  ]);

  const [powers, setPowers] = useState<entity[]>([]);

  const removePower = (entity: entity) => {
    setPowers(powers.filter((power) => power !== entity));
  };

  const powerSubmit = (event: any) => {
    event.preventDefault();
    const power: entity = {
      x: event.target.x.value,
      y: event.target.y.value,
      z: event.target.z.value,
      vx: event.target.vx.value,
      vy: event.target.vy.value,
      vz: event.target.vz.value,
    };
    if (powers.includes(power)) {
      return;
    }
    setPowers((prevPowers) => [...prevPowers, power]);
  };

  const projectileSubmit = (event: any) => {
    event.preventDefault();
    setProjectile([
      {
        x: event.target.x.value,
        y: event.target.y.value,
        z: event.target.z.value,
        vx: event.target.vx.value,
        vy: event.target.vy.value,
        vz: event.target.vz.value,
        fuse: event.target.fuse.value,
      },
    ]);
  };

  const settingsSubmit = (event: any) => {
    event.preventDefault();
    setSettings([
      {
        maxPower: event.target.maxPower.value,
        x: event.target.x.value,
        y: event.target.y.value,
        z: event.target.z.value,
        vx: event.target.vx.value,
        vy: event.target.vy.value,
        vz: event.target.vz.value,
      },
    ]);
  };

  return (
    <>
      <Head>
        <title>Tom - Calculator</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className=" min-h-screen max-h-full text-black flex">
        <div className="  bg-[#7cafc4] dark:bg-black w-1/2 h-f8">
          <div
            className=" mx-10 text-center text-xl mt-5
          "
          >
            <Tab.Group
              selectedIndex={selectedIndex}
              onChange={setSelectedIndex}
            >
              <Tab.List className="flex rounded-xl bg-blue-900 p-1 justify-evenly gap-2 text-white w-full shadow-xl dark:bg-[#151313]">
                {tabs.map((name) => (
                  <motion.div
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.8 }}
                  >
                    <Tab className=" text-white/50 font-extrabold rounded-xl py-5 mt-1 my-1 text-md hover:text-white ui-selected:text-transparent ui-selected:bg-clip-text ui-selected:bg-gradient-to-r ui-selected:from-red-500 to ui-selected:bg-yellow-500 w-full leading-5 text-2xl">
                      {name}
                    </Tab>
                  </motion.div>
                ))}
              </Tab.List>
              <Tab.Panels className="mt-5">
                <Tab.Panel>
                  <InputForm
                      calculate={() => calculate()}

                      submit={powerSubmit}
                    fields={PowerFields}
                    title={"Power Selection"}
                  />
                </Tab.Panel>
                <Tab.Panel>
                  <InputForm
                      calculate={() => calculate()}
                    submit={projectileSubmit}
                    fields={ProjectileFields}
                    title={"Projectile Selection"}
                  />
                </Tab.Panel>
                <Tab.Panel>
                  <InputForm
                      calculate={() => calculate()}

                      submit={settingsSubmit}
                    fields={SettingsFields}
                    title={"All settings are optional"}
                  />
                </Tab.Panel>
              </Tab.Panels>
            </Tab.Group>
          </div>
        </div>

        {/* Outputs */}
        <div className="bg-[#7cafc4] dark:bg-black w-1/2 py-5">
          {selectedIndex === 0 && (
            <OutputFields
              items={powers}
              removeItems={(power: entity) => removePower(power)}
            />
          )}
          {selectedIndex === 1 && (
            <OutputFields
              items={projectile}
              removeItems={() => setProjectile([])}
            />
          )}
          {selectedIndex === 2 && (
            <OutputFields
              items={settings}
              removeItems={() => setSettings([])}
            />
          )}
        </div>
      </main>
    </>
  );
}
